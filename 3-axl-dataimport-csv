[module newgenerator('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]

[** Common--------------------------------------------------------------*/]
[query public valueOf(emod : EModelElement, pname : String) : String = 
    if (emod.hasProperty(pname)) then
        emod.getEAnnotation('genmymodel').details->any(key = pname).value
    else 
        null
    endif
/]
[query public hasProperty(emod : EModelElement, pname : String) : Boolean = 
    emod.getEAnnotation('genmymodel').details->exists(key = pname)
/]
[query public getAppArchitectureBackendElements(emod : Model) : Bag(Package) = 
    emod.packagedElement->select(name = 'AppArchitecture').ownedElement->filter(Package)
/]
[** Common--------------------------------------------------------------*/]

[template public generate(m : Model)]
[comment @main/]
[for (be : Package | m.getAppArchitectureBackendElements())]
[be.genModuleExceptionMessageInterface()/]
[be.genDataInitInputConfigMetaFile()/]
[be.packagedElement->filter(Class).genFiles()/]
[/for]
[/template]

[template public genFiles(c : Class)]
[c.genEntityImportConfigurationRecord()/]
[c.genEntityImportConfigurationBindMetaFile()/]
[c.genEntityImportConfigurationDataMetaFile()/]

[c.genImportEntityConfigurationClass()/]

[c.genImportEntityClass()/]

[c.genEntityImportController()/]
[/template]

[** ---------------------------------------------------------------*/]
[template public genEntityImportConfigurationRecord(c : Class) ? (c.hasProperty('_DATAIMPORT'))] 
[file ('modules/' + c._package.name + '/src/main/resources/data-init/input/base_' + c.name.toLower() + '_importConfiguration.csv', false, 'UTF-8')]
"name";"typeSelect";"user.importId"
"import-[c.name.toLower()/]-config";"csv";1
[/file]
[/template]

[** ---------------------------------------------------------------*/]
[template public genEntityImportConfigurationDataMetaFile(c : Class) ? (c.hasProperty('_DATAIMPORT'))] 
[file ('modules/' + c._package.name + '/src/main/resources/data-init/input/files/' + c.name + '.csv', false, 'UTF-8')]
[for (p : Property | c.attribute)]"[p.name/]",[/for]
[/file]
[/template]

[** ---------------------------------------------------------------*/]
[template public genEntityImportConfigurationBindMetaFile(c : Class) ? (c.hasProperty('_DATAIMPORT'))] 
[file ('modules/' + c._package.name + '/src/main/resources/data-init/input/files/import-' + c.name.toLower() + '-config.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_5.3.xsd">

    <input file="[c.name/].csv" separator="," type="[c.getModel().valueOf('company_group')/].[c._package.name/].db.[c.name/]" >
    </input>

</csv-inputs>
[/file]
[/template]


[** ---------------------------------------------------------------*/]
[template public genImportEntityConfigurationClass(c : Class) ? (c.hasProperty('_DATAIMPORT'))] 
[file ('modules/' + c._package.name + '/src/main/java/' + c.getModel().valueOf('company_group') + '/csv/script/Import' + c.name + 'Configuration.java', false, 'UTF-8')]
package [c.getModel().valueOf('company_group')/].csv.script;

import com.axelor.apps.base.db.ImportConfiguration;
import com.axelor.meta.MetaFiles;
import com.google.inject.Inject;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Import[c.name/]Configuration {

  public static final String IMPORT_[c.name.toUpper()/]_CONFIG = "import-[c.name.toLower()/]-config.xml";
  public static final String IMPORT_[c.name.toUpper()/]_CSV = "[c.name/].csv";
  public static final String FILES_DIR = "files";

  private final Logger log = LoggerFactory.getLogger(Import[c.name/]Configuration.class);
  @Inject private MetaFiles metaFiles;

  public Object importFiles(Object bean, Map<String, Object> values) {

    assert bean instanceof ImportConfiguration;

    final Path path = (Path) values.get("__path__");

    ImportConfiguration importConfig = (ImportConfiguration) bean;

    try {
      File file = path.resolve(FILES_DIR + File.separator + IMPORT_[c.name.toUpper()/]_CONFIG).toFile();
      importConfig.setBindMetaFile(metaFiles.upload(file));
      file = path.resolve(FILES_DIR + File.separator + IMPORT_[c.name.toUpper()/]_CSV).toFile();
      importConfig.setDataMetaFile(metaFiles.upload(file));
    } catch (IOException e) {
      log.debug("Error importing [c.name.toLower()/] import config", e);
      return null;
    }

    return importConfig;
  }
}
[/file]
[/template]


[** ---------------------------------------------------------------*/]
[template public genDataInitInputConfigMetaFile(pa : Package) ? (pa.packagedElement->filter(Class).eAnnotations.details->exists(key = '_DATAIMPORT'))] 
[file ('modules/' + pa.name + '/src/main/resources/data-init/input-config.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_5.3.xsd">

[for (c : Class | pa.packagedElement->filter(Class))] 
[if (c.hasProperty('_DATAIMPORT'))]
    <input file="base_[c.name/]_importConfiguration.csv" separator="," type="com.axelor.apps.base.db.ImportConfiguration" call="[c.getModel().valueOf('company_group')/].csv.script.Import[c.name/]Configuration:importFiles" />
[/if]
[/for]

</csv-inputs>
[/file]
[/template]

[** ---------------------------------------------------------------*/]
[template public genImportEntityClass(c : Class) ? (c.hasProperty('_DATAIMPORT'))] 
[file ('modules/' + c._package.name + '/src/main/java/' + c.getModel().valueOf('company_group') + '/csv/script/Import' + c.name + '.java', false, 'UTF-8')]
package [c.getModel().valueOf('company_group')/].csv.script;

import [c.getModel().valueOf('company_group')/].[c._package.name/].db.[c.name/];
import [c.getModel().valueOf('company_group')/].[c._package.name/].db.repo.[c.name/]Repository;
import com.google.inject.Inject;
import java.util.Map;

public class Import[c.name/] {

  @Inject private [c.name/]Repository objRepo;

  public Object save[c.name/] (Object bean, Map<String, Object> values) {

    assert bean instanceof [c.name/];

    [c.name/] obj = ([c.name/]) bean;

    return objRepo.save(obj);
  }
}
[/file]
[/template]

[** ---------------------------------------------------------------*/]
[template public genModuleExceptionMessageInterface(pa : Package) ? (pa.packagedElement->filter(Class).eAnnotations.details->exists(key = '_DATAIMPORT'))] 
[file ('modules/' + pa.name + '/src/main/java/' + pa.getModel().valueOf('company_group') + '/apps/' + pa.name + '/exception/IExceptionMessage.java', false, 'UTF-8')]
package [pa.getModel().valueOf('company_group')/].apps.[pa.name/].exception;

/** @author axelor */
public interface IExceptionMessage {

[for (c : Class | packagedElement->filter(Class))] 
[if (c.hasProperty('_DATAIMPORT'))]
  /** [c.name/] controller */
  static final String [c.name.toUpper()/]_1 = /*$$(*/ "Please select the [c.valueOf('DISPLAY_NAME_PL').toLower()/] to print." /*)*/;
  static final String [c.name.toUpper()/]_4 = /*$$(*/ "No [c.valueOf('DISPLAY_NAME_SG').toLower()/] import configuration found" /*)*/;
  static final String [c.name.toUpper()/]_5 = /*$$(*/ "Import [c.valueOf('DISPLAY_NAME_PL').toLower()/]" /*)*/;
[/if]
[/for]
}
[/file]
[/template]

[** ---------------------------------------------------------------*/]
[template public genEntityImportController(c : Class) ? (c.hasProperty('_DATAIMPORT'))]
[file ('modules/' + c._package.name + '/src/main/java/' + c.getModel().valueOf('company_group') + '/apps/' + c._package.name + '/web/' + c.name + 'ImportController.java', false, 'UTF-8')]
/*
 * Axelor Business Solutions
 *
 * Copyright (C) 2020 Axelor (<http://axelor.com>).
 *
 * This program is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General 'modules/' + c._package.name + Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package [c.getModel().valueOf('company_group')/].apps.[c._package.name.toLower()/].web;

import com.axelor.apps.ReportFactory;
import com.axelor.apps.base.db.ImportConfiguration;
import com.axelor.apps.base.db.repo.ImportConfigurationRepository;
import com.axelor.apps.base.service.MapService;
import [c.getModel().valueOf('company_group')/].apps.[c._package.name.toLower()/].exception.IExceptionMessage;
import com.axelor.apps.report.engine.ReportSettings;
import [c.getModel().valueOf('company_group')/].csv.script.Import[c.name/]Configuration;
import com.axelor.inject.Beans;
import com.axelor.meta.schema.actions.ActionView;
import com.axelor.rpc.ActionRequest;
import com.axelor.rpc.ActionResponse;
import com.axelor.i18n.I18n;
import com.google.inject.Singleton;
import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.util.List;
import java.util.Map;
import org.eclipse.birt.core.exception.BirtException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
public class [c.name/]ImportController {

  private final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
  
  public void get[c.name/]ImportConfig(ActionRequest request, ActionResponse response) {

    ImportConfiguration icObj =
        Beans.get(ImportConfigurationRepository.class)
            .all()
            .filter("self.bindMetaFile.fileName = ?1", Import[c.name/]Configuration.IMPORT_[c.name.toUpper()/]_CONFIG)
            .fetchOne();

    logger.debug("ImportConfig for [c.name.toLower()/]: {}", icObj);

    if (icObj == null) {
      response.setFlash(I18n.get(IExceptionMessage.[c.name.toUpper()/]_4));
    } else {
      response.setView(
          ActionView.define(I18n.get(IExceptionMessage.[c.name.toUpper()/]_5))
              .model("com.axelor.apps.base.db.ImportConfiguration")
              .add("form", "import-configuration-form")
              .param("popup", "reload")
              .param("forceEdit", "true")
              .param("popup-save", "false")
              .param("show-toolbar", "false")
              .context("_showRecord", icObj.getId().toString())
              .map());
    }
  }
}
[/file]
[/template]
[comment End/]

